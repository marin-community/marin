name: Run unit tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  pull_request_review:
    types: [submitted]
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        python-version: ["3.12"]
        node-version: ["20.10.0"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '3.1.11'  # Pin version for cache consistency
      
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/.npm
            ~/node_modules
          key: ${{ runner.os }}-deps-v1-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-v1-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "uv>=0.7.19" toml
          npm install -g pandiff
          uv sync --dev --extra=cpu

      - name: Test with pytest
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          CI: true
        run: |
          PYTHONPATH=tests:. uv run --extra=cpu pytest -n3 --durations=5 --tb=no -m 'not slow and not gcp' -vv tests/

  tpu-test:
    runs-on: [tpu-ci]  # Label for TPU CI
    timeout-minutes: 10
    if: |
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-tpu-tests')) ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ (github.event_name == 'pull_request_review' && format('refs/pull/{0}/merge', github.event.pull_request.number)) || '' }}

      - name: Run TPU tests in Docker
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          # Clean up TPU resources before running tests
          rm -f /tmp/libtpu_lockfile || true
          lsof -t /dev/vfio/* 2>/dev/null | xargs -r kill -9 || true

          # Levanter likes to log to `logs/` and crashes if it can't write there
          # Pytest writes to the cache directory and creates noise warnings if it can't write there

          docker run --rm --privileged \
            --device /dev/vfio:/dev/vfio \
            --net=host \
            --shm-size=100g \
            --stop-timeout=1 \
            --cap-add=SYS_RESOURCE \
             --ulimit memlock=68719476736:68719476736 \
            -e JAX_PLATFORMS=tpu \
            -e PJRT_DEVICE=TPU \
            -e TPU_CI=true \
            -e START_RAY_TPU_CLUSTER=true \
            -e PYTHONPATH=/workspace \
            -e UV_PROJECT_ENVIRONMENT=/opt/marin/.venv \
            -e HF_TOKEN \
            -e WANDB_API_KEY \
            -v ${{ github.workspace }}:/workspace:rw \
            --tmpfs /workspace/logs:rw \
            --tmpfs /workspace/.pytest_cache:rw \
            -w /workspace \
            us-west4-docker.pkg.dev/hai-gcp-models/marin-ci/tpu-ci:latest \
            timeout --kill-after=5 --signal=TERM 900 uv run pytest tests/tpu/ -v --tb=short -s --log-cli-level=INFO