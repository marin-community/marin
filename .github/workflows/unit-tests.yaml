name: Run unit tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true

    strategy:
      matrix:
        python-version: ["3.12"]
        node-version: ["20.10.0"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: marin_unit_test_env
          auto-activate-base: false

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ runner.os }}-${{ matrix.python-version }}-unittest

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.NEW_GCP_JSON }}
          
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda install -c conda-forge pandoc
          npm install -g pandiff
          python -m pip install --upgrade pip
          pip install uv==0.5.11 toml
          python scripts/install_all_pip_dep.py

      - name: Cache Resiliparse C libraries
        id: cache-resiliparse
        uses: actions/cache@v3
        with:
          path: /usr/local
          key: ${{ runner.os }}-resiliparse-c-${{ matrix.python-version }}-${{ matrix.node-version }}
          restore-keys: |
            ${{ runner.os }}-resiliparse-c-${{ matrix.python-version }}-
            ${{ runner.os }}-resiliparse-c-

      - name: Install Resiliparse DOM
        if: steps.cache-resiliparse.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          # Install basic build dependencies
          sudo apt-get update && sudo apt-get install -y build-essential python3-dev zlib1g-dev liblz4-dev cmake curl

          # Update the libstdc++ in conda environment to match system version
          conda install -c conda-forge libstdcxx-ng -y

          # Install lexbor v2.3.0 from source with the correct build options
          curl -Lf https://github.com/lexbor/lexbor/archive/refs/tags/v2.3.0.tar.gz > lexbor.tar.gz
          tar -xf lexbor.tar.gz
          cd lexbor-*
          mkdir build
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -DLEXBOR_BUILD_SHARED=ON \
              -DLEXBOR_BUILD_STATIC=OFF \
              -DLEXBOR_OPTIMIZATION_LEVEL=-O3 \
              -B build
          cmake --build build -j$(nproc)
          sudo cmake --build build --target install
          cd ..
          rm -rf lexbor*
          sudo ldconfig

          # Install uchardet from source
          curl -Lf https://gitlab.freedesktop.org/uchardet/uchardet/-/archive/v0.0.8/uchardet-v0.0.8.tar.gz > uchardet.tar.gz
          tar -xf uchardet.tar.gz
          cd uchardet-*
          mkdir build
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -B build
          cmake --build build -j$(nproc)
          sudo cmake --build build --target install
          cd ..
          rm -rf uchardet*
          
          # Install Abseil C++ library (required by re2)
          curl -Lf https://github.com/abseil/abseil-cpp/releases/download/20240116.1/abseil-cpp-20240116.1.tar.gz > abseil.tar.gz
          tar -xf abseil.tar.gz
          cd abseil-cpp-*
          mkdir build
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_STANDARD=17 \
              -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -B build
          cmake --build build -j$(nproc)
          sudo cmake --build build --target install
          cd ..
          rm -rf abseil*
          
          # Install re2 from source
          curl -Lf https://github.com/google/re2/releases/download/2024-04-01/re2-2024-04-01.tar.gz > re2.tar.gz
          tar -xf re2.tar.gz
          cd re2-*
          mkdir build
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_STANDARD=17 \
              -DBUILD_SHARED_LIBS=ON \
              -DRE2_BUILD_TESTING=OFF \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -B build
          cmake --build build -j$(nproc)
          sudo cmake --build build --target install
          cd ..
          rm -rf re2*
          
      - name: Install Resiliparse DOM Python package
        shell: bash -l {0}
        run: |
          pip install 'resiliparse_dom @ git+https://github.com/stanford-crfm/chatnoir-resiliparse@18dd25b4640caf915d1443c320ba220b2694e058#egg=resiliparse_dom&subdirectory=resiliparse_dom'

      - name: Start Ray cluster locally
        shell: bash -l {0}
        run: |
          ray start --head

      - name: Test with pytest
        shell: bash -l {0}
        run: |
          export CI=true # Set CI environment variable; It's needed for tokenization
          CI=true PYTHONPATH=tests:. pytest --durations=0 --tb=no -v tests/
        env: # Or as an environment variable
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
