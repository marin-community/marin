# FROM anyscale/ray:2.46.0-slim-py311-cpu
FROM rayproject/ray:2.44.1-py311-cpu
ARG VLLM_VERSION=v0.9.0

# Install general dependencies
RUN sudo apt-get update && sudo apt-get install -y clang curl g++ vim libpython3.11 libpython3.11-dev docker.io cmake gnupg

# Setup gcsfuse
RUN sudo apt install lsb-release -y
RUN export GCSFUSE_REPO=gcsfuse-`lsb_release -c -s` && echo "deb https://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
RUN sudo apt-get update && sudo apt-get install fuse gcsfuse -y
RUN sudo mkdir /opt/gcsfuse_mount
RUN sudo chown -R $(whoami) /opt/gcsfuse_mount

# Install resiliparse build dependencies (requires libre2-dev>=2022-04-01)
RUN sudo apt-get install -y build-essential zlib1g-dev liblz4-dev libuchardet-dev libre2-dev
# Install lexbor from source, since the apt package for jammy is corrupted
RUN set && curl -Lf https://github.com/lexbor/lexbor/archive/refs/tags/v2.3.0.tar.gz > lexbor.tar.gz \
    && tar -xf lexbor.tar.gz \
    && (cd lexbor-* && mkdir build \
        && cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DLEXBOR_BUILD_SHARED=ON \
            -DLEXBOR_BUILD_STATIC=OFF \
            -DLEXBOR_OPTIMIZATION_LEVEL=-O3 \
            -B build \
        && sudo cmake --build build -j$(nproc) --target install) \
    && rm -rf lexbor*

# install rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH=$HOME/.cargo/bin:$PATH

RUN sudo mkdir -p /opt/marin/
RUN sudo chown -R $(whoami) /opt/marin/
# Ray uses conda
ENV PATH=/home/ray/anaconda3/bin:/home/ray/anaconda3/bin:/home/ray/anaconda3/condabin:$PATH

# gcloud
RUN conda install conda-forge::google-cloud-sdk -y
RUN gcloud components install alpha

RUN conda install -c conda-forge ncurses -y

# Install Jax for TPU usage, fsspec for GCS access, and transformers for OLMO

# Installing all the core dependencies
# ['draccus>=0.8.0', 'google-api-python-client~=2.0', 'ray', 'gcsfs', 'google-cloud-storage',
# 'google-cloud-storage-transfer', 's3fs', 'regex', 'requests', 'numpy', 'torch', 'braceexpand', 'deepdiff', 'tqdm',
# 'tqdm-loggable', 'toml', 'pandas', 'pyarrow', 'jax==0.4.35', 'multiprocess==0.70.16', 'levanter>=1.2.dev1163']
# RUN pip install --no-cache-dir -U draccus==0.11.5 google-api-python-client~=2.0 gcsfs google-cloud-storage google-cloud-storage-transfer s3fs regex requests numpy braceexpand deepdiff tqdm tqdm-loggable toml pandas pyarrow "levanter>=1.2.dev1361" "haliax>=1.4dev348"

# Install vLLM to try
RUN sudo apt update && \
    sudo mkdir -p /opt/vllm && \
    sudo chown -R $(whoami) /opt/vllm && \
    cd /opt/vllm && \
    git clone https://github.com/vllm-project/vllm.git && \
    cd vllm && \
    git checkout ${VLLM_VERSION} && \
    pip uninstall torch torch-xla -y && \
    pip install --no-cache-dir -r requirements/tpu.txt && \
    sudo apt-get install libopenblas-base libopenmpi-dev libomp-dev -y && \
    VLLM_TARGET_DEVICE="tpu" python3 -m pip install -e .

# RUN pip install --no-cache-dir -U pip && \
#     pip install --no-cache-dir fsspec>=2024.9.0 draccus==0.11.5 google-api-python-client~=2.0 gcsfs google-cloud-storage google-cloud-storage-transfer regex requests numpy braceexpand deepdiff tqdm tqdm-loggable toml pandas pyarrow "levanter>=1.2.dev1361" "haliax>=1.4dev348"

# Supress TPU XLA logs
RUN echo "export TF_CPP_MIN_LOG_LEVEL=1" >> /home/ray/.bashrc
# NOTE: Try to keep as much "heavy" stuff as possible before this line to avoid re-installing

# (not installing pyproject.toml because it interferes with Ray's RuntimeEnv deps)
#WORKDIR /tmp/
#ADD pyproject.toml /tmp/
#RUN pip install --no-cache-dir . --extra-index-url https://download.pytorch.org/whl/cpu

# copy in the autoscaler hacks
# ENV VENV_PATH=/home/ray/anaconda3/
# RUN sudo mkdir /opt/abhi-ray
# RUN sudo chown -R $(whoami) /opt/abhi-ray
# WORKDIR /opt/abhi-ray
# RUN git clone --branch abhi-2.34.0 --single-branch --depth 1 https://github.com/abhinavg4/ray.git
# RUN rm -rf $VENV_PATH/lib/python3.11/site-packages/ray/autoscaler
# RUN ln -s /opt/abhi-ray/ray/python/ray/autoscaler $VENV_PATH/lib/python3.11/site-packages/ray/autoscaler

# HACK until https://github.com/ray-project/ray/issues/47769 is resolved
# RUN git clone https://github.com/dlwh/ray.git ~/ray --branch tpu_docker_2.34 --depth 1
# RUN cp ~/ray/python/ray/autoscaler/_private/gcp/tpu_command_runner.py $VENV_PATH/lib/python3.11/site-packages/ray/autoscaler/_private/gcp/tpu_command_runner.py
# RUN rm -rf ~/ray

# Add /usr/lib/x86_64-linux-gnu/ to LD_LIBRARY_PATH so that bash prefers the systems
# libtinfo.so over the conda-provided version. Using the conda-provided libtinfo.so
# outputs a noisy warning because it doesn't include version information.
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu/
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/ray/anaconda3/lib
ENV PATH=$PATH:/home/ray/anaconda3/bin

# to run docker containers, we need to be in the docker group
RUN sudo usermod -aG docker $(whoami)

WORKDIR /opt/marin
